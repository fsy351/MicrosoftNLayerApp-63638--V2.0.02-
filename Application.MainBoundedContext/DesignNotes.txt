ABOUT MODULES & BOUNDED-CONTEXTS (BC)
-------------------------------------
The relationship between a BC and a MODEL is usually 1:1. But we could share the same database between several
different BC with a different view of the database for each (a diferent MODEL). Or the DB could also be different for each BC.
Then, we can have several MODULES per BOUNDEX-CONTEXT. MODULES organize elements within one MODEL, providing
different namespaces and some demarcation and organization. 
MODULES are like chapters (modules) in a book (BC-MODEL).
[For more info, see references from Eric Evans, Udi Dahan, etc. regarding BC]
 
IMPORTANT!!: Each MODEL depends on your specific DOMAIN. In our case, our fictitious DOMAIN is very simple 
because it is a sample-app, not a real app. Therefore, for our DOMAIN, we chose that we initially have
a single MainBoundedContext and two Modules (BankingModule and ERPModule) which share the same MODEL.
But of course, different DOMAINS have different MODELS and MODULES. In a large business app, probably
the ERP system would be a BOUNDED-CONTEXT and the Banking system would be another BOUNDED-CONTEXT, as both
concepts are really different in reality.
But in our fictitious DOMAIN, this is how we chose it to be, for simplicity. Our goal is only to show DDD patterns implementation using .NET,
not to teach how to apply DDD (Ubiquitous Language, DDD practices, etc.). There are excelent theorical books for that, like Eric Evans and many others.
Your BC, MODEL & MODULES will depend on your specific DOMAINS and you'll have to determine that 
while talking with your DOMAIN experts and business users.
 
Also, we called our BC as 'MainBoundedContext' because it is an example and we want explicitely to show what
is our Bounded-Context related to the MODEL. Usually, in a real project, you will simply name it with a meaningful name for your system, 
from your ubiquitous language.
 
BOUNDED-CONTEXTS COMPOSITION
There are a few patterns in order to compose several BC. We are not covering this subject within this .NET example, as we have a single BC and MODEL. 
In order to know more about this, search information about the following patterns:
- Shared Kernel
- Customer Supplier
- Conformist
- Anticorruption Layer
- Separate Ways
- Open-Host Service 


DTO & Conventions
-----------------
Usually, transfer objects are named adding a postfix like DTO in order to highlight that it is external to the Domain Model
and it is used as a Data Contract for external systems or the presentation layer.
In RestFull architecture trends,  a 'Resource Representation' is in many ways quite similar to a DTO. 

But, even when the Distributed Services Façade of this application is based on REST, we decided not to use the postfix 'Representation',
because a 'Resource Representation' would mean something more. A full Restful system can also include hypermedia 
within the 'Resource Representation', including possible transitions.
(Ref: See HATEOAS 'hypermedia as engine of app state'). We're not doing this, yet.
